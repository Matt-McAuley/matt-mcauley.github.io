{"Personal Info":{"name":"Matthew McAuley","label":"","image":"","email":"mwm223@cornell.edu","phone":"(516) 946-0870","location":{"address":"140 Von Huenfeld Street","postalCode":"11762","city":"Massapequa Park","countryCode":"US","region":"New York"},"profiles":[]},"education":[{"institution":"Cornell University","location":"Ithaca, New York","area":"Computer Science","studyType":"Bachelor's of Science","startDate":"2022-08-01","endDate":"2025-12-01","courses":[" OOP & Data Structures, Functional Programming, Discrete Structures, Algorithms, Machine Learning, Database Systems, Digital Logic, Linear Algebra, Embedded Systems, Language & Information, Probability & Statistics"]}],"experience":[{"name":"Octus (formerly Reorg)","position":"Software Engineer Intern","url":"https://octus.com","startDate":"2024-06-01","endDate":"2024-08-01","summary":"• Developed C# API for retrieving and organizing CLO market data into multi-level tables each with unique insights\n • Optimized data retrieval with Redis caching, reducing page load times from ∼5s to under 75ms after initial request\n • Created NUnit integration tests with complete coverage, ensuring proper functionality after codebase changes\n • Accessed Snowflake loan DB with 3.2M+ rows, adding relevant entries to objects defined by Postgres relationships\n • Launched website for Credit Cloud platform, used by over 30,000 legal and financial professionals worldwide"},{"name":"Cornell Cup Robotics","position":"Software Developer","url":"https://cornellcuprobotics.com/index.html","startDate":"2023-08-01","endDate":"2024-05-01","summary":"• Consulted major robotics company to design low-cost, educational robots for use across 2,000+ universities globally\n • Designed website with Flask backend allowing for wireless connection and programming of onboard microcontroller\n • Implemented React.js GUI for intuitive pairing, movement, blockly coding, script writing, and location graphing\n • Built overhead vision system using April Tags to track robot ID, location, and orientation relative to other objects"}],"Languages":[{"name":"Python"},{"name":"Javascript"},{"name":"Typescript"},{"name":"C#"},{"name":"Java"},{"name":"OCaml"},{"name":"C"},{"name":"Assembly"},{"name":"HTML"},{"name":"CSS"},{"name":"SQL"}],"Tools":[{"name":"Git"},{"name":"GitHub"},{"name":"Docker"},{"name":"AWS"},{"name":"OCI"},{"name":"Redis"},{"name":"Snowflake"},{"name":"PostgreSQL"},{"name":"SQLite"},{"name":"Postman"},{"name":"npm"},{"name":"conda"},{"name":"Verilog"}],"Libraries/Frameworks":[{"name":".NET"},{"name":"NUnit"},{"name":"React"},{"name":"Expo"},{"name":"Flask"},{"name":"SQLAlchemy"},{"name":"NumPy"},{"name":"Pandas"},{"name":"PyTorch"},{"name":"Selenium"}],"projects":[{"name":"Exercise Engine","summary":" • Full-stack website allowing ad-hoc or drop-down querying of exercises and returning the most similar results\n • Created Flask API with SVD text mining and cosine similarity to measure relationships between descriptions\n • Programmed HTML, CSS, and JS frontend allowing for API requests, applying filters, and neatly displaying results\n • Used Selenium to web-scrape JSON database with exercise descriptions, muscle groups, and YouTube tutorials\n • Containerized the application using Docker/Docker Hub for deployment on an AWS EC2 instance running Ubuntu","url":"https://github.com/matt-mcauley/Exercise-Engine"},{"name":"GymBuddy","summary":" • Fitness companion mobile app with rest timer, set counter, exercise display, and custom workout plan creation\n • Developed UI using Expo, React Native, TypeScript, and Tailwind CSS, with Expo-Router for file-based navigation\n • Implemented local storage of custom workout plans and exercises using SQLite database, enabling offline access\n • Integrated Spotify Web API with OAuth2 Code Flow for user authentication, providing intuitive media control","url":"https://github.com/matt-mcauley/GymBuddy"},{"name":"To-Do Manager","summary":" • Web-app for managing projects and their respective ‘todos’, each containing a title, description, and due date\n • Developed a React frontend with Typescript, utilizing emotion/styled CSS in TS for better code organization\n • Built RESTful Flask API that interacts with a SQLAlchemy relational database for project/todo persistence","url":"https://github.com/matt-mcauley/To-Do-Manager"},{"name":"Caml Capital","summary":" • Terminal recreation of the board game ‘Monopoly’ done almost entirely with functional programming in OCaml\n • Worked in a 3-person team with weekly sprints and multiple prototype stages that offered increasing client value\n • Utilized compilation units, higher order functions, OUnit test suites, version control, and rigorous documentation","url":"https://github.com/matt-mcauley/Caml-Capital"}]}